import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         "bundleIn${productFlavor}${buildType}"
 *   //         "bundleIn${buildType}"
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require("./image.png")), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require("./image.png")), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

/*plugins {
    id "me.tatarka.retrolambda" version "3.4.0"
}*/

project.ext.react = [
    // the entry file for bundle generation
    entryFile: "Build/index.android.js",
    extraPackagerArgs: ["--sourcemap-output", file("$buildDir/outputs/index.android.js.map")],
];
apply from: "../../node_modules/react-native/react.gradle"

apply plugin: "com.android.application"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false
// Run Proguard to shrink the Java bytecode in release builds.
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    //buildToolsVersion "23.0.1"
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "v.lucidlink"
        //minSdkVersion 18
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 3
        versionName "1.1.0"
        ndk {
            abiFilters "armeabi-v7a"
            //, "x86"
        }

        /*jackOptions {
            enabled true
        }*/

        multiDexEnabled true
    }

    dexOptions {
        //incremental true
        //javaMaxHeapSize "3000m"
        preDexLibraries true
        javaMaxHeapSize "3g" // Use gig increments depending on needs
    }

    /*splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a"
            //, "x86"
        }
    }*/

    // signing
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    packagingOptions {
        exclude "META-INF/NOTICE" // will not include NOTICE file
        exclude "META-INF/LICENSE" // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude "META-INF/notice"
        exclude "META-INF/notice.txt"
        exclude "META-INF/license"
        exclude "META-INF/license.txt"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        //checkReleaseBuilds false
        disable "ValidFragment" // or: @SuppressLint("ValidFragment")
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

//String userConfig = new File("../UserConfig.json").text

/*configurations.all((Closure) {
    resolutionStrategy {
        force "com.android.support:support-v4:25.1.0" // force runtime to use this version of support library
    }
})
allprojects {
    configurations.all((Closure) {
        resolutionStrategy {
            force "com.android.support:support-v4:25.1.0" // force runtime to use this version of support library
        }
    })
}*/
configurations {
    /*compile.exclude module: "commons"
    all*.exclude group: "org.gradle.test.excludes", module: "reports"*/
    /*all*.exclude group: "com.android.support"
    all*.exclude module: "com.android.support"
    all*.exclude module: "support-v4"*/
}

// have other modules use the react-native version from-source (as used below, in [compile project...])
/*configurations.all {
    exclude group: "com.facebook.react", module: "react-native"
}*/

dependencies {
    //compile "com.android.support:appcompat-v7:23.0.1"

    //compile "com.facebook.react:react-native:0.42.0-rc.3" // From node_modules
    //compile project(':ReactAndroid')
    implementation "com.facebook.react:react-native:+"

    // android support
    implementation project(':react-native-dialogs')
    implementation project(':react-native-numberpicker-dialog')
    implementation project(':react-native-file-picker')
    implementation project(':react-native-orientation')
    implementation project(':react-native-fs')
    implementation project(':react-native-dialogs')
    implementation project(':react-native-android-speech')
    implementation project(':react-native-android-snackbar')
    implementation project(':react-native-background-timer')
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-libmuse')
    implementation project(':RNMaterialKit')
    implementation project(':RNSound')
    //if (userConfig.contains('"reactNativeLibMuse_external": true'))
    implementation project(":react-native-libmuse")
    /*compile project(':MPChartLib')
    if (userConfig.contains('"mpChartLib_external": true'))
      compile "com.github.PhilJay:MPAndroidChart:v3.0.1"*/
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    /*compile(files("libs/com.resmed.refresh-158.jar")) {
        exclude group: "com.android.support"
    }*/
    implementation 'com.annimon:stream:1.1.4'
    implementation 'com.google.firebase:firebase-core:10.0.1'
    implementation 'com.google.firebase:firebase-crash:10.0.1'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.android.support:support-annotations:26.0.0'
    implementation 'com.android.support:design:26.0.0'
    implementation 'com.android.support:percent:26.0.0'
    implementation 'com.android.support:recyclerview-v7:26.0.0'
    implementation 'com.android.support:support-v4:26.0.0'
    /*{
        force = true
    }*/
    implementation 'com.android.support:appcompat-v7:26.0.0'
    /*{
        force = true
    }*/
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into "libs"
}

apply plugin: 'com.google.gms.google-services'